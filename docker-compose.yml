version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: engram
      POSTGRES_USER: engram
      POSTGRES_PASSWORD: engram
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U engram -d engram"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - engram-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - engram-network

  # ChromaDB Vector Database
  chroma:
    image: chromadb/chroma:latest
    environment:
      CHROMA_SERVER_HOST: 0.0.0.0
      CHROMA_SERVER_HTTP_PORT: 8001
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/v1/version"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - engram-network

  # Engram API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    environment:
      # Application
      APP_ENV: production
      LOG_LEVEL: INFO
      PORT: 8000
      DEBUG: "false"
      
      # Database
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: engram
      POSTGRES_USER: engram
      POSTGRES_PASSWORD: engram
      DATABASE_URL: postgresql://engram:engram@postgres:5432/engram
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      REDIS_ENABLED: "true"
      
      # Vector Database
      VECTOR_BACKEND: chroma
      CHROMA_PERSIST_DIR: /data/chroma
      
      # Embeddings
      DEFAULT_EMBEDDINGS_PROVIDER: local
      
      # Multimodal Configuration
      DEFAULT_IMAGE_EMBEDDINGS: clip
      WHISPER_MODEL: small
      KEYFRAME_SEC: 8
      BLOB_STORE_DIR: /data/blobs
      
      # Graph Configuration
      GRAPH_TRIPLE_EXTRACTION: heuristic
      GRAPH_MAX_RADIUS: 2
      SPACY_MODEL: en_core_web_sm
      
      # Chat Configuration
      CHAT_CONTEXT_WINDOW: 4000
      CHAT_MAX_MEMORIES: 10
      CHAT_TEMPERATURE: 0.7
      
      # Rate Limiting
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_REQUESTS_PER_MINUTE: 60
      
      # Providers (set these in production)
      # OPENAI_API_KEY: ${OPENAI_API_KEY}
      # ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
    volumes:
      - chroma_data:/data/chroma
      - blob_data:/data/blobs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chroma:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - engram-network
    restart: unless-stopped

  # RQ Worker Service
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    environment:
      # Application
      APP_ENV: production
      LOG_LEVEL: INFO
      
      # Database
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: engram
      POSTGRES_USER: engram
      POSTGRES_PASSWORD: engram
      DATABASE_URL: postgresql://engram:engram@postgres:5432/engram
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      REDIS_ENABLED: "true"
      
      # Vector Database
      VECTOR_BACKEND: chroma
      CHROMA_PERSIST_DIR: /data/chroma
      
      # Embeddings
      DEFAULT_EMBEDDINGS_PROVIDER: local
      
      # Multimodal Configuration
      DEFAULT_IMAGE_EMBEDDINGS: clip
      WHISPER_MODEL: small
      KEYFRAME_SEC: 8
      BLOB_STORE_DIR: /data/blobs
      
      # Graph Configuration
      GRAPH_TRIPLE_EXTRACTION: heuristic
      GRAPH_MAX_RADIUS: 2
      SPACY_MODEL: en_core_web_sm
      
      # Job Processing
      JOB_TIMEOUT: 300
      JOB_RETRY_ATTEMPTS: 3
      
      # Providers (set these in production)
      # OPENAI_API_KEY: ${OPENAI_API_KEY}
      # ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
    volumes:
      - chroma_data:/data/chroma
      - blob_data:/data/blobs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chroma:
        condition: service_started
    command: ["python", "-m", "engram.workers.worker"]
    networks:
      - engram-network
    restart: unless-stopped

  # RQ Dashboard
  rq-dashboard:
    image: eoranged/rq-dashboard:latest
    environment:
      - RQ_DASHBOARD_REDIS_URL=redis://redis:6379/0
    ports:
      - "9181:9181"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - engram-network
    restart: unless-stopped

  # Engram Web UI
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    environment:
      - ENGRAM_API_BASE=http://api:8000
      - ENGRAM_API_KEY=${ENGRAM_API_KEY:-your-default-api-key}
      - NEXT_PUBLIC_APP_NAME=Engram
      - NEXT_PUBLIC_APP_VERSION=1.0.0
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - engram-network
    restart: unless-stopped

  # Database Migration Service (runs once)
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    environment:
      DATABASE_URL: postgresql://engram:engram@postgres:5432/engram
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: engram
      POSTGRES_USER: engram
      POSTGRES_PASSWORD: engram
    command: ["python", "-m", "alembic", "upgrade", "head"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - engram-network
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local
  blob_data:
    driver: local

networks:
  engram-network:
    driver: bridge
