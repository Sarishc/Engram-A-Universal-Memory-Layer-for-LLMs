name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"

jobs:
  # Code Quality Checks
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run ruff linter
      run: |
        ruff check engram tests --output-format=github
        
    - name: Run ruff formatter check
      run: |
        ruff format --check engram tests
        
    - name: Run black formatter check
      run: |
        black --check engram tests
        
    - name: Run isort import sorting check
      run: |
        isort --check-only engram tests
        
    - name: Run mypy type checker
      run: |
        mypy engram --ignore-missing-imports

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_engram
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_engram
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_DB: test_engram
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run database migrations
      run: |
        python -m alembic upgrade head
        
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=engram --cov-report=xml --cov-report=html --cov-fail-under=80
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Archive coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: htmlcov/

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_engram
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_engram
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_DB: test_engram
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      REDIS_URL: redis://localhost:6379/0
      REDIS_ENABLED: "true"
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run database migrations
      run: |
        python -m alembic upgrade head
        
    - name: Run integration tests
      run: |
        pytest tests/ -v -m integration --cov=engram --cov-report=xml --cov-append

  # Docker Build and Test
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: engram:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        # Test that the image can start
        docker run --rm -d --name engram-test -p 8000:8000 engram:test
        sleep 10
        
        # Test health check
        curl -f http://localhost:8000/v1/health || exit 1
        
        # Clean up
        docker stop engram-test

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
        
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Run bandit security linter
      run: |
        bandit -r engram/ -f json -o bandit-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_engram
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_engram
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
        
    - name: Run database migrations
      run: |
        python -m alembic upgrade head
        
    - name: Run performance tests
      run: |
        # Start the API server in background
        python -m engram.api.server &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Run basic performance test
        python -c "
        import time
        import requests
        
        # Test basic API performance
        start_time = time.time()
        response = requests.get('http://localhost:8000/v1/health')
        end_time = time.time()
        
        print(f'Health check response time: {(end_time - start_time) * 1000:.2f}ms')
        assert response.status_code == 200
        assert (end_time - start_time) < 1.0  # Should respond within 1 second
        "
        
        # Clean up
        kill $SERVER_PID

  # Documentation Build
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mkdocs mkdocs-material
        
    - name: Build documentation
      run: |
        # Generate API documentation from OpenAPI spec
        python -c "
        import json
        import requests
        import sys
        
        # Start server temporarily to get OpenAPI spec
        import subprocess
        import time
        
        proc = subprocess.Popen([sys.executable, '-m', 'engram.api.server'])
        time.sleep(5)
        
        try:
            response = requests.get('http://localhost:8000/openapi.json')
            if response.status_code == 200:
                with open('docs/api_spec.json', 'w') as f:
                    json.dump(response.json(), f, indent=2)
                print('API spec generated successfully')
            else:
                print('Failed to generate API spec')
        finally:
            proc.terminate()
            proc.wait()
        "
        
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: |
          docs/
          README.md

  # Deploy to Staging (on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test, docker, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment script here
        # For example: kubectl apply -f k8s/staging/
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging..."
        # Add smoke test commands here
        # For example: curl -f https://staging.engram.ai/v1/health

  # Deploy to Production (manual trigger)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test, docker, security]
    if: github.event_name == 'workflow_dispatch'
    
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your deployment script here
        # For example: kubectl apply -f k8s/production/
        
    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add health check commands here
        # For example: curl -f https://api.engram.ai/v1/health
